Stack:
Stack is a data structure that stores items in Last-In/First-Out manner.

The Structure of Stack can be imagined as pile of Objects stacked vertically.
While extracting these objects, the last added to the stack is the first one removed.

A stack is a fundamental data structure in computer science that follows the Last-In-First-Out(LIFO) principle.
In a stack, elements are added and removed from the top only, resembling a stack of plates or books where you can only add or remove items from the top.

A stack is an abstract data type that serves as a collection of elements with 2 main principal operations: push , which adds an element to the top of the stack, and pop,
which removes the most recently added element that was not yet removed. Additionally , a peek or top operation may give access to the top element without modifying the stack.
The order in which elements come off a stack gives rise to its alternative name, "LIFO" (Last In, First Out).

Why/where do we need Stack?

1. Function calls and recursion: 
================================
Stacks are essential for managing function calls in programming languages. When a function is called, its local variables and parameters are stored in a stack frame.
This allows the program to return to the previous function when current function completes its execution.

2. Expression Evaluation:
=========================
Stacks are used to evaluate expressions, particularly infix expressions.
Infix expressions, such as "3+4*(5-2)", can be converted to postfix or prefix notation using stacks, which simplifies their evaluation.

3. Backtracking Algorithm:
==========================
Stacks are used in backtracking algorithms, such as depth-first search(DFS), to keep track of the path taken during exploration.
When a dead end is reached, the algorithm backtracks by popping elements off the stack until a new path is found.

4. Undo Mechanisms:
===================
Stacks are used to implement undo mechanisms in applications such as text editors.
Each action performed by the user(e.g. typing, deleting) is stored in a stack, allowing the user to undo actions by popping them off the stack.

5. Syntax Parsing and checking:
===============================
Stacks are used in parsing and syntax checking of programming languages and markup languages.

6. Algorithm Implementations:
=============================
stacks are used in the implementation of various algorithm, such as topological sorting, tree traversal algorithms(eg. in-order traversal), and finding strongly connected components in directed graphs.

Stack Operations:
===============

Push : This operation adds an element to the top of the stack.
Pop: This operation removes and returns the element at the top of the stack.
Peek: This operation returns the element at the top of the stack without removing it.
Empty(or IsEmpty): This operation checks whether the stack is empty or not. It returns true if the stack is empty, and false otherwise,
Size: This operation returns the number of elements currently in the stack.

These operations allow us to manipulate the stack according to the Last-In-first-Out(LIFO) principle, where the most recently added element is the first to be removed.

Stack Using Array Vs Stack using LinkedList:
===========================================

Stack using Array:
1. Implementation is easy
2. Fixed size

Stack using LinkedList
1. Variable size
2. Implementation is not easy.



When to use Stack and When to Avoid:
=====================================

Use:
1. When we need to use LIFO functionality we usually go with stack.
2. The chance of data corruption is minimum

Avoid:
1. Random Access is not possible
