Before explaining about the algorithm, lets under what is Time Complexity

Time Complexity :
Time complexity is a measure of the amount of time an algorithm takes to complete as a function of the size of its input.
In other words, it quantifies the efficiency of an algorithm in terms of the growth rate of its running time relative to the size of the input
Time complexity is often expressed using Big O notation.

Time complexity is a measure of how the running time of an algorithm grows as the input size increases.

The time complexity of linear search is O(n), where "n" is the number of elements in the collection being searched. Here's a detailed explanation:

Basic Operation:
-----------------
The basic operation in linear search is the comparison of the target value with each element in the collection.

Worst-Case Scenario:
--------------------
The worst-case scenario occurs when the target value is either not present in the collection or is located at the last position. In this case, the algorithm needs to traverse the entire collection to determine that the target value is not there or is at the end.

Number of Comparisons:
--------------------
In the worst case, linear search requires comparing the target value with each element of the collection. Therefore, the number of comparisons is directly proportional to the number of elements in the collection, denoted by "n."

Time Complexity Notation:
-------------------------
Using Big O notation, we express the time complexity of linear search as O(n). The "O" stands for "order of" or "big O," and "(n)" indicates that the time complexity grows linearly with the size of the input (number of elements).

Linear Growth:
------------------
As the number of elements in the collection (n) increases, the time taken by the linear search also increases linearly. If the collection has twice as many elements, the linear search will take roughly twice as long.

Best-Case Time Complexity:
-------------------------
The best-case time complexity occurs when the target value is found at the beginning of the collection. In this case, the algorithm makes only one comparison, resulting in a best-case time complexity of O(1).